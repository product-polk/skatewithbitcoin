// Reset high score script for Skate with Bitcoin
console.log('Resetting high score for Skate with Bitcoin game...');

// Since we're in Node.js, we'll provide instructions to reset via browser console
console.log('\nTo reset your high score and add debugging:');
console.log('1. Open the game in your browser');
console.log('2. Open the browser console (F12 or Command+Option+J)');
console.log('3. Copy and paste the following commands:');
console.log('\n   // First, clear existing high score data');
console.log('   localStorage.removeItem("skatewithbitcoinHighScore");');
console.log('   localStorage.removeItem("skatewithbitcoinPlayerName");');
console.log('   localStorage.removeItem("skatewithbitcoinAutoSubmitted");');
console.log('   localStorage.removeItem("skatewithbitcoinDeviceId");');
console.log('\n   // Add debug logging for high score submission');
console.log('   const originalFetch = window.fetch;');
console.log('   window.fetch = function(url, options) {');
console.log('     console.log("Fetch called with URL:", url);');
console.log('     if (options && options.body) {');
console.log('       console.log("Request body:", options.body);');
console.log('     }');
console.log('     return originalFetch.apply(this, arguments).then(response => {');
console.log('       console.log("Response status:", response.status);');
console.log('       console.log("Response OK:", response.ok);');
console.log('       // Clone the response to read the body without consuming it');
console.log('       const clone = response.clone();');
console.log('       clone.json().then(data => {');
console.log('         console.log("Response data:", data);');
console.log('       }).catch(e => {');
console.log('         console.log("Could not parse response as JSON");');
console.log('       });');
console.log('       return response;');
console.log('     });');
console.log('   };');
console.log('\n   // Log localStorage changes');
console.log('   const originalSetItem = localStorage.setItem;');
console.log('   localStorage.setItem = function(key, value) {');
console.log('     console.log("localStorage.setItem:", key, value);');
console.log('     return originalSetItem.call(this, key, value);');
console.log('   };');
console.log('\n   // Monitor for DOM changes to detect high score modal');
console.log('   const observer = new MutationObserver(mutations => {');
console.log('     mutations.forEach(mutation => {');
console.log('       if (mutation.addedNodes.length) {');
console.log('         const highScoreModal = document.querySelector("#highscores-modal-overlay");');
console.log('         if (highScoreModal) {');
console.log('           console.log("High score modal detected:", highScoreModal);');
console.log('         }');
console.log('       }');
console.log('     });');
console.log('   });');
console.log('   observer.observe(document.body, { childList: true, subtree: true });');
console.log('\n   console.log("Debug instrumentation added and high scores reset!");');
console.log('\n4. Refresh the page to see the changes');
console.log('\nYour high score has been reset and debugging is now active.'); 